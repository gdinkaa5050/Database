Run the following query to find the active sessions:


SELECT sid, serial#, username, osuser, machine, program, status
FROM v$session
WHERE status = 'ACTIVE';
âœ” This will list all active sessions.

ðŸ”¹ Step 2: Identify the Session You Want to Kill
If you are targeting a specific session, filter by username or program:


SELECT sid, serial#, username, osuser, machine, program, status
FROM v$session
WHERE username = 'YOUR_USER';
âœ” Note down the SID and SERIAL# of the session to kill.

ðŸ”¹ Step 3: Kill the Session in the Database
Run the following command using the SID and SERIAL# you identified:


ALTER SYSTEM KILL SESSION 'SID,SERIAL#' IMMEDIATE;
Example:


ALTER SYSTEM KILL SESSION '123,456' IMMEDIATE;
âœ” If the session does not immediately disappear, proceed to Step 4.

ðŸ”¹ Step 4: Find the Corresponding OS Process (PID)
After killing the session at the database level, check if it still exists in the OS.
Run the following query to get the process ID (PID) at the OS level:


SELECT s.sid, s.serial#, p.spid AS os_pid, s.username, s.osuser, s.machine, s.program
FROM v$session s
JOIN v$process p ON s.paddr = p.addr
WHERE s.sid = 123;  -- Replace with the actual SID
âœ” Note down the OS PID (column os_pid).

ðŸ”¹ Step 5: Kill the Process at the OS Level
âœ… On Linux/Unix:
Run the following command to kill the process:


kill -9 <OS_PID>
Example:


kill -9 98765
âœ” Use ps -ef | grep <OS_PID> to confirm if the process is still running.

âœ… On Windows:
Run the following command in Command Prompt (cmd):


taskkill /F /PID <OS_PID>
Example:


taskkill /F /PID 98765
âœ” You can also check the process in Task Manager.

ðŸ”¹ Step 6: Verify the Session is Killed
Run this query to confirm that the session no longer exists:


SELECT sid, serial#, status FROM v$session WHERE sid = 123;

*************************************************************************
How to Identify the Process Consuming CPU and Its Corresponding Database Session
If your database server is experiencing high CPU usage, you need to find the OS process (PID) consuming CPU and map it to the corresponding Oracle session.

ðŸ”¹ Step 1: Identify High CPU Processes on the OS
âœ… On Linux/Unix
Run the following command to list the top CPU-consuming processes:


top -o %CPU
OR


ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head -10
âœ” PID: This is the OS Process ID consuming CPU.

âœ… On Windows
Run the following command in Command Prompt (cmd):

cmd

wmic process get ProcessId,CommandLine,UserModeTime /format:csv | sort /R /+3 | more
OR
Check Task Manager â†’ Processes â†’ Sort by CPU Usage.

âœ” Note down the PID of the highest CPU-consuming Oracle process.

ðŸ”¹ Step 2: Map OS Process (PID) to Database Session
Now, find the database session running the high CPU process.

Run the following query in Oracle:


SELECT s.sid, s.serial#, s.username, s.osuser, s.machine, s.program, s.sql_id, p.spid AS os_pid
FROM v$session s
JOIN v$process p ON s.paddr = p.addr
WHERE p.spid = <OS_PID>;
ðŸ”¹ Replace <OS_PID> with the process ID found in Step 1.

âœ” This will return the Oracle session (SID, SERIAL#) running on that OS process.

ðŸ”¹ Step 3: Identify the SQL Running in That Session
Once you have the SID and SERIAL#, check what SQL query is consuming CPU:


SELECT sql_id, sql_text
FROM v$sql
WHERE sql_id = (SELECT sql_id FROM v$session WHERE sid = <SID>);
âœ” This helps you determine if a long-running or expensive query is causing the high CPU usage.

ðŸ”¹ Step 4: Kill the Session If Needed
If the session is causing issues, terminate it:

Kill the session in Oracle

ALTER SYSTEM KILL SESSION '<SID>,<SERIAL#>' IMMEDIATE;
Example:


ALTER SYSTEM KILL SESSION '123,456' IMMEDIATE;
Kill the OS Process (If Session Doesn't Terminate)
âœ… On Linux
bash

kill -9 <OS_PID>
âœ… On Windows
cmd

taskkill /F /PID <OS_PID>
